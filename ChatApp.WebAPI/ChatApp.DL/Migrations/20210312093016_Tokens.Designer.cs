// <auto-generated />
using System;
using ChatApp.DL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ChatApp.DL.Migrations
{
    [DbContext(typeof(ChatAppContext))]
    [Migration("20210312093016_Tokens")]
    partial class Tokens
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ChatApp.Models.ConnectionModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConnected")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("ChatApp.Models.ConversationModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserModelID")
                        .HasColumnType("bigint");

                    b.Property<long>("UserOneID")
                        .HasColumnType("bigint");

                    b.Property<long>("UserTwoID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("UserModelID");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("ChatApp.Models.ConversationReplyModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ConversationID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("SenderUserId")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("ConversationID");

                    b.ToTable("ConversationReplies");
                });

            modelBuilder.Entity("ChatApp.Models.FriendModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserFriendId")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("UserFriendId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("ChatApp.Models.UserModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValidationToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ChatApp.Models.ConnectionModel", b =>
                {
                    b.HasOne("ChatApp.Models.UserModel", "User")
                        .WithMany("Connections")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChatApp.Models.ConversationModel", b =>
                {
                    b.HasOne("ChatApp.Models.UserModel", null)
                        .WithMany("Conversations")
                        .HasForeignKey("UserModelID");
                });

            modelBuilder.Entity("ChatApp.Models.ConversationReplyModel", b =>
                {
                    b.HasOne("ChatApp.Models.ConversationModel", "Conversation")
                        .WithMany("ConversationsReplies")
                        .HasForeignKey("ConversationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("ChatApp.Models.FriendModel", b =>
                {
                    b.HasOne("ChatApp.Models.UserModel", "UserFriend")
                        .WithMany("Friends")
                        .HasForeignKey("UserFriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserFriend");
                });

            modelBuilder.Entity("ChatApp.Models.ConversationModel", b =>
                {
                    b.Navigation("ConversationsReplies");
                });

            modelBuilder.Entity("ChatApp.Models.UserModel", b =>
                {
                    b.Navigation("Connections");

                    b.Navigation("Conversations");

                    b.Navigation("Friends");
                });
#pragma warning restore 612, 618
        }
    }
}
